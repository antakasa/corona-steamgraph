[{"/Users/saaantt/Desktop/projektit/plus-ennakko/src/reportWebVitals.js":"1","/Users/saaantt/Desktop/projektit/plus-ennakko/src/App.js":"2","/Users/saaantt/Desktop/projektit/plus-ennakko/src/index.js":"3","/Users/saaantt/Desktop/projektit/plus-ennakko/src/Dataviz.js":"4","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/colors.js":"5","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/scales.js":"6","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dataMethods.js":"7","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/initialize.js":"8","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/layout.js":"9","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dateMethods.js":"10","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/categories.js":"11","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/annotations.js":"12","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/calculations.js":"13","/Users/saaantt/Desktop/projektit/plus-ennakko/src/Slides.js":"14"},{"size":362,"mtime":1610734970849,"results":"15","hashOfConfig":"16"},{"size":3624,"mtime":1610993003534,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1610734970848,"results":"18","hashOfConfig":"16"},{"size":5648,"mtime":1610989328292,"results":"19","hashOfConfig":"16"},{"size":340,"mtime":1610892968461,"results":"20","hashOfConfig":"16"},{"size":1358,"mtime":1610985315408,"results":"21","hashOfConfig":"16"},{"size":3057,"mtime":1610992533425,"results":"22","hashOfConfig":"16"},{"size":2801,"mtime":1610986087566,"results":"23","hashOfConfig":"16"},{"size":334,"mtime":1610917222543,"results":"24","hashOfConfig":"16"},{"size":1093,"mtime":1610988499632,"results":"25","hashOfConfig":"16"},{"size":822,"mtime":1610887353026,"results":"26","hashOfConfig":"16"},{"size":832,"mtime":1610986705914,"results":"27","hashOfConfig":"16"},{"size":3774,"mtime":1610992705043,"results":"28","hashOfConfig":"16"},{"size":5533,"mtime":1610993658548,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"n5h8he",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"/Users/saaantt/Desktop/projektit/plus-ennakko/src/reportWebVitals.js",[],["66","67"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/App.js",[],["68","69"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/index.js",[],["70","71"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/Dataviz.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/colors.js",[],["72","73"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/scales.js",["74","75"],"import { max, min } from \"d3-array\";\nimport { scaleLinear } from \"d3-scale\";\nimport { timeMonth } from \"d3-time\";\n\nexport const createYScale = ({allDates, data, width, height, parseDate, formatDate, margin}) => {\n    const minValue = min(allDates)\n    const maxValue  = max(allDates)\n    return scaleLinear().domain([minValue,maxValue]).range([0, height]);\n \n  }\nfunction getNumberOfWeek(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n}\n\n\nexport const createTicks = ({allDates,formatDateWeek, tickDates, parseDate, formatDate, yScale, firstScaledDate, lastScaledDate}) => {\n  let parsed = tickDates.map(e => parseDate(e))\n    parsed.unshift(allDates[0])\n    const bigTicks = parsed.map((value) => {\n      return ({\n      value: formatDate(value),\n      yOffset: yScale(value),\n    })});\n    const smallTicks = allDates.map((value) => {\n      return ({\n      value: formatDateWeek(value),\n      yOffset: yScale(value),\n    })}); \n    return { bigTicks, smallTicks} \n}\n\nexport const createXScale = (width, data) => {\n  const minValue = min(data, d => min(d, d=> d[0]))\n  const maxValue = max(data, d => max(d, d=> d[1]))\n  return scaleLinear().domain([minValue, maxValue]).range([50, width - 50 ])\n}","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dataMethods.js",["76","77","78"],"import rollingAverage from \"sma\";\nimport { area, curveBasis, stack, stackOffsetSilhouette } from \"d3-shape\";\nimport censusData from \"../censusData.json\";\n\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\nexport const stackData = (data, keys) => {\n  return stack().offset(stackOffsetSilhouette).keys(keys)(data);\n};\nexport const createAreas = (y, x) =>\n  area()\n    .y(function (d) {\n      return x(d.data.date);\n    })\n    .x0(function (d) {\n      return y(d[0]);\n    })\n    .x1(function (d) {\n      return y(d[1]);\n    })\n    .curve(curveBasis);\n\nexport const filterByDate = ({\n  data,\n  startDate,\n  endDate,\n  parseDate,\n  outliers,\n}) =>\n  data.filter(\n    (e) =>\n      outliers.indexOf(e.date) === -1 &&\n      parseDate(e.date) > parseDate(startDate) &&\n      parseDate(e.date) < parseDate(endDate)\n  );\n\nexport const parseData = ({\n  data,\n  parseDate,\n  categories,\n  categorizeGroup,\n  nth,\n  alwaysInclude,\n  formatDateBackToOriginal,\n}) => {\n  //console.log(data.filter((e) => e.date === \"5.7.2020\"));\n  var mergedObj = data.reduce((acc, obj) => {\n    const category = categorizeGroup(obj.group);\n    //const category = obj.group\n    if (acc[obj.date]) {\n      acc[obj.date] = {\n        ...acc[obj.date],\n        [category]:\n          (parseInt(acc[obj.date][category], 10) || 0) +\n          (parseInt(obj.value, 10) || 0),\n      };\n    } else {\n      acc[obj.date] = { [category]: obj.value || 0 };\n    }\n\n    return acc;\n  }, {});\n\n  // TODO: SANITY CHECK THAT \"KAIKKI IKÄRYHMÄT\" VALUE MATCHES THE SUM OF GROUP VALUES\n\n  let output = [];\n  for (let prop in mergedObj) {\n    output.push({ ...mergedObj[prop], date: parseDate(prop) });\n  }\n  const applyRollingAverage = (() => {\n    //  modify data so that daily values are actually moving average of last 7 days\n    let rollingAverages = {};\n    let range = 7;\n    for (let index = 0; index < categories.length; index++) {\n      let category = categories[index];\n\n      const allValuesWithinCategory = output.map((e) => e[category]);\n\n      const avg = rollingAverage(allValuesWithinCategory, range);\n      rollingAverages[category] = avg;\n    }\n\n    output.map((e, i) => {\n      if (i < 6) {\n        return null;\n      }\n\n      for (let index = 0; index < categories.length; index++) {\n        let category = categories[index];\n        let value = rollingAverages[category][i - 6];\n        value = value === \"NaN\" ? 0 : value;\n        //value = parseInt(value) / censusData[0][category];\n         value = parseInt(value)\n        e[category] = value;\n      }\n    });\n    output = output.slice(6);\n  })();\n\n  const alwaysIncludedValues = output.filter((e) => {\n  return  alwaysInclude.indexOf(formatDateBackToOriginal(e.date)) > -1\n  }\n    );\n  console.log(alwaysInclude)\n  console.log(alwaysIncludedValues)\n  output = everyNth(output, nth);\n  function sortByDateAscending(a, b) {\n    // Dates will be cast to numbers automagically:\n    return a.date - b.date;\n}\n  const final = [...output, ...alwaysIncludedValues]\n  final.sort(sortByDateAscending)\n  return final;\n};\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/initialize.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/layout.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dateMethods.js",["79"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/categories.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/annotations.js",["80","81"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/calculations.js",["82","83","84"],"import { max } from \"d3-array\";\nimport censusData from \"../censusData.json\";\nimport { parseDate } from \"./dateMethods\";\nexport const calculations = (() => {\n  let baseData = {};\n\n  const filterDataByDate = (data, date) => data.filter((e) => e.date === date);\n\n  const filterDataBasedOnGroups = (data, groups) =>\n    data.filter((e) => groups.indexOf(e.group) > -1);\n\n  const groupByDate = (data, startDate, endDate) => {\n    return data.reduce((acc, obj) => {\n      const category = obj.group;\n      if (acc[obj.date]) {\n        acc[obj.date] = {\n          ...acc[obj.date],\n          [category]:\n            (parseInt(acc[obj.date][category], 10) || 0) +\n            (parseInt(obj.value, 10) || 0),\n        };\n      } else {\n        if (\n          !startDate ||\n          !endDate ||\n          (parseDate(obj.date) > parseDate(startDate) &&\n            parseDate(obj.date) < parseDate(endDate))\n        ) {\n          acc[obj.date] = { [category]: obj.value || 0 };\n        }\n      }\n\n      return acc;\n    }, {});\n  };\n\n  const countSum = (arr) => {\n    if (arr.length === 0) return 0;\n    return arr.reduce(function (accumulator, obj) {\n      let value = parseInt(obj.value, 10);\n      if (isNaN(value)) value = 0; //TODO What are the empty values\n      return accumulator + value;\n    }, 0);\n  };\n\n  return {\n    mostInfectionsOnADateByGroups: (categories, startDate, endDate) => {\n      const dataGrouped = groupByDate(baseData, startDate, endDate);\n      const keys = Object.keys(dataGrouped);\n\n      let parsed = [];\n      let comparison = keys.map((key) => {\n        let obj = {};\n        let sum = 0;\n\n        categories.forEach((category) => {\n          obj[category] = isNaN(parseInt(dataGrouped[key][category], 10))\n            ? 0\n            : parseInt(dataGrouped[key][category], 10);\n          sum =\n            sum +\n            (isNaN(parseInt(dataGrouped[key][category], 10))\n              ? 0\n              : parseInt(dataGrouped[key][category], 10));\n        });\n        obj.sum = sum;\n        obj.date = key;\n        parsed.push(obj);\n      });\n      console.log(parsed)\n      const maxValue = max(parsed, (d) => d.sum);\n      const date = parsed.find((e) => e.sum === maxValue);\n      return { maxValue, date };\n    },\n    calculateByDateAndCategory: (date, categories) => {\n      const dateFiltered = filterDataByDate(baseData, date);\n      const categoryAndDateFiltered = filterDataBasedOnGroups(\n        dateFiltered,\n        categories\n      );\n      return countSum(categoryAndDateFiltered);\n    },\n    under40ShareInPopulation: () => {\n      const sample =\n        parseInt(censusData[0][\"0-19\"], 10) +\n        parseInt(censusData[0][\"20-39\"], 10);\n      console.log(sample);\n      const total = parseInt(censusData[0][\"total\"], 10);\n      return (sample / total) * 100;\n    },\n    under40: () => {\n      const onlyGroups = baseData.map((e) => e.group);\n      const uniqueGroups = [...new Set(onlyGroups)];\n\n      // Which % of infections are from people under 40 yrs\n      const over40Groups = [\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"];\n      const under40Groups = [\"00-10\", \"10-20\", \"20-30\", \"30-40\"];\n      const all = [\"Kaikki ikäryhmät\"];\n      const over40 = filterDataBasedOnGroups(baseData, over40Groups);\n      const under40 = filterDataBasedOnGroups(baseData, under40Groups);\n      const allGroups = filterDataBasedOnGroups(baseData, all);\n      const sanityCheck =\n        [...over40, ...under40, ...allGroups].length === baseData.length;\n\n      if (sanityCheck) {\n        const total = countSum([...over40, ...under40]);\n        const under40Average = (countSum(under40) / total) * 100;\n        return under40Average;\n      }\n    },\n    storeData: (data) => {\n      baseData = data;\n    },\n    getData: () => baseData,\n  };\n})();\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/Slides.js",["85"],"import { calculations } from \"./utils/calculations\";\nexport const generateSlides = () => [\n  {\n    annotations: [],\n    text: [\n      \"Kuviossa näkyy tartunnat ikäryhmittäin. Tartunnoilla tarkoitetaan rekisteröityjä positiivisia testituloksia.\",\n    ],\n  },\n  {\n    highlightedLayers: [\"20-39\"],\n    annotations: [],\n    text: [\n      \"Yksi alue edustaa yhtä ikäryhmää. Korostettuna näkyy tartuntamäärässä mitattuna suurin ryhmä eli 20–39-vuotiaat.\",\n    ],\n  },\n  {\n    annotations: [\n      {\n        date: \"10.11.2020\",\n        categories: [\"0-19\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"00-10\",\n          \"10-20\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"20-39\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"20-30\",\n          \"30-40\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"40-59\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"40-50\",\n          \"50-60\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"60-79\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"60-70\",\n          \"70-80\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"80-\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"80-\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n    ],\n   \n    text: [\n      'Päivittäisen heilunnan tasaamiseksi tartuntoja kuvaavat datapisteet on laskettu kuviossa <a href=\"https://fi.wikipedia.org/wiki/Liukuva_keskiarvo\" target=\"_blank\">liukuviksi keskiarvoiksi</a> 7 päivän ajalta. ',\n      \"Teksteissä tartuntojen kappalemäärillä viitataan kuitenkin absoluuttisiin lukuihin.\",\n    ],\n  },\n  {\n    annotations: [],\n    text: [\"Kunkin alueen leveys suhteessa muihin kuvaa tartuntojen lukumäärää.\",\n    \"Mitä leveämpi alue on, sitä enemmän tartuntoja rekisteröitiin.\"],\n  },\n  {\n    highlightedLayers: [\"0-19\", \"20-39\"],\n    annotations: [],\n    text: [\n      `Alle 40-vuotiaiden osuus kaikista varmistetuista tartunnoista on noin ${Math.round(\n        calculations.under40()\n      )} %.`,\n      `Ryhmän noin 2,5 miljoonaa jäsentä kattaa ${Math.round(\n        calculations.under40ShareInPopulation()\n      )} % Suomen väestöstä.`,\n    ],\n  },\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"])\n    const date = data.date.date \n    const text = [`Suurimmillaan tartuntojen rekisteröinnit olivat ${data.date.date}`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"])\n    const date = data.date.date \n    const text = [`Yli 40-vuotiailla nähtiin tosin myös samoihin aikoihin huomattava piikki.`]\n    console.log(date)\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"down\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"40-59\", \"60-79\", \"80-\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Keskimäärin eri ikäryhmien muutokset mukailevat melko hyvin toisiaan.`,\n      `Syksyllä alle 40-vuotiaiden ryhmässä nähtiin kuitenkin hieman muita korkeampia lukuja.`]\n    const annotations = [\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Esimerkiksi ${date}, rekisteröitiin ${data.maxValue} tartunaa alle 40-vuotialla.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"], \"10.10.2020\", \"20.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Yli 40-vuotialla rekisteröitiin samoihin aikoihin enimmillään ${data.maxValue} tartuntaa.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  {\n    highlightedLayers: [\"0-19\"],\n    annotations: [\n    ],\n    text: [\"Alle 20-vuotiaiden tartuntamäärissäkin näkyi selkeää kasvua syksyn aikana.\",\"Tätä taustaa vasten myös lasten ja nuorten harrastustoimintaan kohdistuneet rajoitustoimet näyttävät perustellummilta.\"],\n  }\n];\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"86","replacedBy":"92"},{"ruleId":"88","replacedBy":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":19},{"ruleId":"96","severity":1,"message":"100","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":25},{"ruleId":"96","severity":1,"message":"101","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"102","line":70,"column":9,"nodeType":"98","messageId":"99","endLine":70,"endColumn":28},{"ruleId":"103","severity":1,"message":"104","line":83,"column":23,"nodeType":"105","messageId":"106","endLine":83,"endColumn":25},{"ruleId":"96","severity":1,"message":"107","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":22},{"ruleId":"96","severity":1,"message":"108","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":11,"column":40,"nodeType":"105","messageId":"106","endLine":11,"endColumn":42},{"ruleId":"96","severity":1,"message":"109","line":52,"column":11,"nodeType":"98","messageId":"99","endLine":52,"endColumn":21},{"ruleId":"103","severity":1,"message":"110","line":52,"column":39,"nodeType":"105","messageId":"111","endLine":52,"endColumn":41},{"ruleId":"96","severity":1,"message":"112","line":93,"column":13,"nodeType":"98","messageId":"99","endLine":93,"endColumn":25},{"ruleId":"96","severity":1,"message":"113","line":125,"column":11,"nodeType":"98","messageId":"99","endLine":125,"endColumn":15},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],["114"],["115"],["114"],["115"],["114"],["115"],"no-unused-vars","'timeMonth' is defined but never used.","Identifier","unusedVar","'getNumberOfWeek' is defined but never used.","'censusData' is defined but never used.","'applyRollingAverage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'formatLocale' is defined but never used.","'categories' is defined but never used.","'comparison' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'uniqueGroups' is assigned a value but never used.","'date' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]ndLine":3,"endColumn":18},{"ruleId":"88","severity":1,"message":"94","line":70,"column":9,"nodeType":"90","messageId":"91","endLine":70,"endColumn":28},{"ruleId":"95","severity":1,"message":"96","line":83,"column":23,"nodeType":"97","messageId":"98","endLine":83,"endColumn":25},{"ruleId":"88","severity":1,"message":"99","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":22},{"ruleId":"88","severity":1,"message":"100","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":11,"column":40,"nodeType":"97","messageId":"98","endLine":11,"endColumn":42},{"ruleId":"88","severity":1,"message":"101","line":52,"column":11,"nodeType":"90","messageId":"91","endLine":52,"endColumn":21},{"ruleId":"95","severity":1,"message":"102","line":52,"column":39,"nodeType":"97","messageId":"103","endLine":52,"endColumn":41},{"ruleId":"88","severity":1,"message":"104","line":93,"column":13,"nodeType":"90","messageId":"91","endLine":93,"endColumn":25},{"ruleId":"88","severity":1,"message":"105","line":125,"column":11,"nodeType":"90","messageId":"91","endLine":125,"endColumn":15},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],["106"],["107"],"no-unused-vars","'timeMonth' is defined but never used.","Identifier","unusedVar","'getNumberOfWeek' is defined but never used.","'censusData' is defined but never used.","'applyRollingAverage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'formatLocale' is defined but never used.","'categories' is defined but never used.","'comparison' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'uniqueGroups' is assigned a value but never used.","'date' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]