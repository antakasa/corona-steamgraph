[{"/Users/saaantt/Desktop/projektit/plus-ennakko/src/App.js":"1","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dataMethods.js":"2","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/calculations.js":"3","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/colors.js":"4","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/layout.js":"5","/Users/saaantt/Desktop/projektit/plus-ennakko/src/Slides.js":"6","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dateMethods.js":"7","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Annotation.js":"8","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Legend.js":"9","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Circles.js":"10","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Dataviz.js":"11","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/categories.js":"12","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/scales.js":"13","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/ScrollyTeller.js":"14","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/initialize.js":"15","/Users/saaantt/Desktop/projektit/plus-ennakko/src/index.js":"16","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/YAxis.js":"17","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/annotations.js":"18"},{"size":2655,"mtime":1611002593457,"results":"19","hashOfConfig":"20"},{"size":3057,"mtime":1610992533425,"results":"21","hashOfConfig":"20"},{"size":3774,"mtime":1610992705043,"results":"22","hashOfConfig":"20"},{"size":340,"mtime":1610892968461,"results":"23","hashOfConfig":"20"},{"size":334,"mtime":1610917222543,"results":"24","hashOfConfig":"20"},{"size":6082,"mtime":1610999576778,"results":"25","hashOfConfig":"20"},{"size":1093,"mtime":1610988499632,"results":"26","hashOfConfig":"20"},{"size":1486,"mtime":1610997710588,"results":"27","hashOfConfig":"20"},{"size":671,"mtime":1610996128312,"results":"28","hashOfConfig":"20"},{"size":270,"mtime":1610996289664,"results":"29","hashOfConfig":"20"},{"size":2132,"mtime":1610996723658,"results":"30","hashOfConfig":"20"},{"size":822,"mtime":1610887353026,"results":"31","hashOfConfig":"20"},{"size":1358,"mtime":1610985315408,"results":"32","hashOfConfig":"20"},{"size":1629,"mtime":1611001756089,"results":"33","hashOfConfig":"20"},{"size":2801,"mtime":1610986087566,"results":"34","hashOfConfig":"20"},{"size":615,"mtime":1610997258328,"results":"35","hashOfConfig":"20"},{"size":1802,"mtime":1610996137859,"results":"36","hashOfConfig":"20"},{"size":832,"mtime":1610986705914,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"n5h8he",{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/saaantt/Desktop/projektit/plus-ennakko/src/App.js",["83"],"import \"./App.css\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { json } from \"d3-fetch\";\nimport { Dataviz } from \"./components/Dataviz\";\nimport { CircleContainer } from \"./components/Circles\";\nimport { initialize } from \"./utils/initialize\";\nimport { ScrollyTeller } from \"./components/ScrollyTeller\";\n\nconst settings = {\n  startDate: \"15.4.2020\",\n  endDate: \"20.1.2021\",\n  avgRange: 7, // how many days are taken into account when counting rolling average\n  nth: 7, // pick every nth value from averaged and date filtered data. This smoothens the curves.\n  outliers: [\"26.11.2020\", \"27.11.2020\"], // dropped from data\n  alwaysInclude: [\"10.12.2020\", \"10.11.2020\", \"15.9.2020\", \"2.8.2020\"],\n  tickDates: [\n    // note that first is added automatically\n    \"1.6.2020\",\n    \"1.7.2020\",\n    \"1.8.2020\",\n    \"1.9.2020\",\n    \"1.10.2020\",\n    \"1.11.2020\",\n    \"1.12.2020\",\n    \"1.1.2021\",\n  ],\n};\n\nconst App = () => {\n  const [data, storeData] = useState(null);\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [vizProps, setVizProps] = useState(null);\n  const [slides, storeSlides] = useState(null);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const container = useRef(null)\n\n  useEffect(() => {\n    if (!data) return;\n    const { vizProps, slides } = initialize({ ...settings, data });\n    setVizProps(vizProps);\n    storeSlides(slides);\n  }, [data]);\n\n  useEffect(() => {\n    // container height is used to vertically align dataviz\n    if(container.current && containerHeight === 0) {\n       const {height} = container.current.getBoundingClientRect();\n       setContainerHeight(height)\n    }\n  })\n\n\n  useEffect(() => {\n    (async () => {\n      const data = await json(\n        \"https://plus.yle.fi/lambda_sheets/korona/2021-01-korona_ikaryhma/data.json\"\n      );\n      storeData(data.data);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!vizProps || !slides ? (\n        <section>Ladataan...</section>\n      ) : (\n        <>\n          <section\n            ref={container}\n            id=\"dataviz\"\n            style={{ position: \"sticky\", top: (window.innerHeight / 2) - (containerHeight / 2) + \"px\", left: 0 }}\n          >\n            <Dataviz\n              vizProps={vizProps}\n              slideData={slides ? slides[currentStepIndex] : null}\n            />\n            <CircleContainer\n              slides={slides}\n              currentStepIndex={currentStepIndex}\n            />\n          </section>\n          <ScrollyTeller\n            setCurrentStepIndex={setCurrentStepIndex}\n            slides={slides}/>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n",["84","85"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dataMethods.js",["86","87","88"],"import rollingAverage from \"sma\";\nimport { area, curveBasis, stack, stackOffsetSilhouette } from \"d3-shape\";\nimport censusData from \"../censusData.json\";\n\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\nexport const stackData = (data, keys) => {\n  return stack().offset(stackOffsetSilhouette).keys(keys)(data);\n};\nexport const createAreas = (y, x) =>\n  area()\n    .y(function (d) {\n      return x(d.data.date);\n    })\n    .x0(function (d) {\n      return y(d[0]);\n    })\n    .x1(function (d) {\n      return y(d[1]);\n    })\n    .curve(curveBasis);\n\nexport const filterByDate = ({\n  data,\n  startDate,\n  endDate,\n  parseDate,\n  outliers,\n}) =>\n  data.filter(\n    (e) =>\n      outliers.indexOf(e.date) === -1 &&\n      parseDate(e.date) > parseDate(startDate) &&\n      parseDate(e.date) < parseDate(endDate)\n  );\n\nexport const parseData = ({\n  data,\n  parseDate,\n  categories,\n  categorizeGroup,\n  nth,\n  alwaysInclude,\n  formatDateBackToOriginal,\n}) => {\n  //console.log(data.filter((e) => e.date === \"5.7.2020\"));\n  var mergedObj = data.reduce((acc, obj) => {\n    const category = categorizeGroup(obj.group);\n    //const category = obj.group\n    if (acc[obj.date]) {\n      acc[obj.date] = {\n        ...acc[obj.date],\n        [category]:\n          (parseInt(acc[obj.date][category], 10) || 0) +\n          (parseInt(obj.value, 10) || 0),\n      };\n    } else {\n      acc[obj.date] = { [category]: obj.value || 0 };\n    }\n\n    return acc;\n  }, {});\n\n  // TODO: SANITY CHECK THAT \"KAIKKI IKÄRYHMÄT\" VALUE MATCHES THE SUM OF GROUP VALUES\n\n  let output = [];\n  for (let prop in mergedObj) {\n    output.push({ ...mergedObj[prop], date: parseDate(prop) });\n  }\n  const applyRollingAverage = (() => {\n    //  modify data so that daily values are actually moving average of last 7 days\n    let rollingAverages = {};\n    let range = 7;\n    for (let index = 0; index < categories.length; index++) {\n      let category = categories[index];\n\n      const allValuesWithinCategory = output.map((e) => e[category]);\n\n      const avg = rollingAverage(allValuesWithinCategory, range);\n      rollingAverages[category] = avg;\n    }\n\n    output.map((e, i) => {\n      if (i < 6) {\n        return null;\n      }\n\n      for (let index = 0; index < categories.length; index++) {\n        let category = categories[index];\n        let value = rollingAverages[category][i - 6];\n        value = value === \"NaN\" ? 0 : value;\n        //value = parseInt(value) / censusData[0][category];\n         value = parseInt(value)\n        e[category] = value;\n      }\n    });\n    output = output.slice(6);\n  })();\n\n  const alwaysIncludedValues = output.filter((e) => {\n  return  alwaysInclude.indexOf(formatDateBackToOriginal(e.date)) > -1\n  }\n    );\n  console.log(alwaysInclude)\n  console.log(alwaysIncludedValues)\n  output = everyNth(output, nth);\n  function sortByDateAscending(a, b) {\n    // Dates will be cast to numbers automagically:\n    return a.date - b.date;\n}\n  const final = [...output, ...alwaysIncludedValues]\n  final.sort(sortByDateAscending)\n  return final;\n};\n",["89","90"],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/calculations.js",["91","92","93"],"import { max } from \"d3-array\";\nimport censusData from \"../censusData.json\";\nimport { parseDate } from \"./dateMethods\";\nexport const calculations = (() => {\n  let baseData = {};\n\n  const filterDataByDate = (data, date) => data.filter((e) => e.date === date);\n\n  const filterDataBasedOnGroups = (data, groups) =>\n    data.filter((e) => groups.indexOf(e.group) > -1);\n\n  const groupByDate = (data, startDate, endDate) => {\n    return data.reduce((acc, obj) => {\n      const category = obj.group;\n      if (acc[obj.date]) {\n        acc[obj.date] = {\n          ...acc[obj.date],\n          [category]:\n            (parseInt(acc[obj.date][category], 10) || 0) +\n            (parseInt(obj.value, 10) || 0),\n        };\n      } else {\n        if (\n          !startDate ||\n          !endDate ||\n          (parseDate(obj.date) > parseDate(startDate) &&\n            parseDate(obj.date) < parseDate(endDate))\n        ) {\n          acc[obj.date] = { [category]: obj.value || 0 };\n        }\n      }\n\n      return acc;\n    }, {});\n  };\n\n  const countSum = (arr) => {\n    if (arr.length === 0) return 0;\n    return arr.reduce(function (accumulator, obj) {\n      let value = parseInt(obj.value, 10);\n      if (isNaN(value)) value = 0; //TODO What are the empty values\n      return accumulator + value;\n    }, 0);\n  };\n\n  return {\n    mostInfectionsOnADateByGroups: (categories, startDate, endDate) => {\n      const dataGrouped = groupByDate(baseData, startDate, endDate);\n      const keys = Object.keys(dataGrouped);\n\n      let parsed = [];\n      let comparison = keys.map((key) => {\n        let obj = {};\n        let sum = 0;\n\n        categories.forEach((category) => {\n          obj[category] = isNaN(parseInt(dataGrouped[key][category], 10))\n            ? 0\n            : parseInt(dataGrouped[key][category], 10);\n          sum =\n            sum +\n            (isNaN(parseInt(dataGrouped[key][category], 10))\n              ? 0\n              : parseInt(dataGrouped[key][category], 10));\n        });\n        obj.sum = sum;\n        obj.date = key;\n        parsed.push(obj);\n      });\n      console.log(parsed)\n      const maxValue = max(parsed, (d) => d.sum);\n      const date = parsed.find((e) => e.sum === maxValue);\n      return { maxValue, date };\n    },\n    calculateByDateAndCategory: (date, categories) => {\n      const dateFiltered = filterDataByDate(baseData, date);\n      const categoryAndDateFiltered = filterDataBasedOnGroups(\n        dateFiltered,\n        categories\n      );\n      return countSum(categoryAndDateFiltered);\n    },\n    under40ShareInPopulation: () => {\n      const sample =\n        parseInt(censusData[0][\"0-19\"], 10) +\n        parseInt(censusData[0][\"20-39\"], 10);\n      console.log(sample);\n      const total = parseInt(censusData[0][\"total\"], 10);\n      return (sample / total) * 100;\n    },\n    under40: () => {\n      const onlyGroups = baseData.map((e) => e.group);\n      const uniqueGroups = [...new Set(onlyGroups)];\n\n      // Which % of infections are from people under 40 yrs\n      const over40Groups = [\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"];\n      const under40Groups = [\"00-10\", \"10-20\", \"20-30\", \"30-40\"];\n      const all = [\"Kaikki ikäryhmät\"];\n      const over40 = filterDataBasedOnGroups(baseData, over40Groups);\n      const under40 = filterDataBasedOnGroups(baseData, under40Groups);\n      const allGroups = filterDataBasedOnGroups(baseData, all);\n      const sanityCheck =\n        [...over40, ...under40, ...allGroups].length === baseData.length;\n\n      if (sanityCheck) {\n        const total = countSum([...over40, ...under40]);\n        const under40Average = (countSum(under40) / total) * 100;\n        return under40Average;\n      }\n    },\n    storeData: (data) => {\n      baseData = data;\n    },\n    getData: () => baseData,\n  };\n})();\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/colors.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/layout.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/Slides.js",["94"],"import { calculations } from \"./utils/calculations\";\nexport const generateSlides = () => [\n  {\n    annotations: [],\n    text: [\n      \"<b><x-large>KUINKA IKÄ NÄKYY TARTUNTATILASTOISSA?</x-large></b>\",\n      \"<small>Skrollaa alaspäin ⬇️</small>\"\n    ],\n  },\n  {\n    annotations: [],\n    text: [\n      \"Kuviossa näkyy covid-19-viruksen raportoidut tartunnat viiteen ikäryhmään jaoteltuna.\", \"Tartunnoilla tarkoitetaan rekisteröityjä positiivisia testituloksia.\",\n    ],\n  },\n  {\n    highlightedLayers: [\"20-39\"],\n    annotations: [],\n    text: [\n      \"Yksi alue (väri) edustaa kuviossa yhtä ikäryhmää.\", \"Parhaillaan korostettuna näkyy tartuntamäärässä mitattuna suurin ryhmä eli 20–39-vuotiaat.\",\n    ],\n  },\n  {\n    annotations: [\n      {\n        date: \"10.11.2020\",\n        categories: [\"0-19\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"00-10\",\n          \"10-20\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"20-39\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"20-30\",\n          \"30-40\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"40-59\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"40-50\",\n          \"50-60\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"60-79\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"60-70\",\n          \"70-80\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"80-\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"80-\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n    ],\n   \n    text: [\n      'Päivittäisen heilunnan tasaamiseksi tartuntoja kuvaavat datapisteet on laskettu kuviossa <a href=\"https://fi.wikipedia.org/wiki/Liukuva_keskiarvo\" target=\"_blank\">liukuviksi keskiarvoiksi</a> seitsemän päivän ajalta. ',\n      \"Teksteissä tartuntojen kappalemäärillä viitataan kuitenkin absoluuttisiin lukuihin.\",\n    ],\n  },\n  {\n    annotations: [],\n    text: [\"Kunkin alueen leveys suhteessa muihin kuvaa tartuntojen lukumäärää.\",\n    \"Mitä leveämpi alue, sitä enemmän tartuntoja.\"],\n  },\n  {\n    highlightedLayers: [\"0-19\", \"20-39\"],\n    annotations: [],\n    text: [\n      `Alle 40-vuotiaiden osuus kaikista varmistetuista tartunnoista on noin ${Math.round(\n        calculations.under40()\n      )} % &#185;.`,\n      `<span style=\"font-size: 12px\">&#185;Ryhmän noin 2,5 miljoonaa jäsentä kattaa ${Math.round(\n        calculations.under40ShareInPopulation()\n      )} % Suomen väestöstä.</font>`,\n    ],\n  },\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"])\n    const date = data.date.date \n    const text = [`Suurimmillaan tartuntojen rekisteröinnit olivat ${data.date.date}`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"])\n    const date = data.date.date \n    const text = ['Myös vanhemmilla ikäryhmillä nähtiin samoihin aikoihin huomattavaa kasvua.']\n    console.log(date)\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"down\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"40-59\", \"60-79\", \"80-\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Keskimäärin eri ikäryhmien muutokset mukailevat melko hyvin toisiaan.`,\n      `Syksyllä alle 40-vuotiaiden ryhmässä nähtiin kuitenkin hieman muita korkeampia lukuja.`]\n    const annotations = [\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const data2 = calculations.mostInfectionsOnADateByGroups([\"20-30\"], \"1.8.2020\", \"28.10.2020\")\n    console.log(data2)\n    const date = data.date.date \n    const text = [\n      `Korkeakoulujen alettua rekisteröitiin korkeimmillaan ${data.maxValue} tartuntaa alle 40-vuotialla (${date})`, `Tästä luvusta \n      ${data2.maxValue} rekisteröitiin 20–30-vuotiaiden osaryhmässä.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"], \"10.10.2020\", \"20.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Kaikilla yli 40-vuotialla rekisteröitiin samoihin aikoihin enimmillään ${data.maxValue} tartuntaa.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  {\n    highlightedLayers: [\"0-19\"],\n    annotations: [\n    ],\n    text: [\"Alle 20-vuotiaiden tartuntamäärissäkin näkyi selkeää kasvua syksyn aikana.\",\"Tätä taustaa vasten myös lasten ja nuorten harrastustoimintaan kohdistuneet rajoitustoimet näyttävät perustellummilta.\"],\n  }\n];\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/dateMethods.js",["95"],"import { formatLocale } from \"d3-format\";\nimport { timeFormat, timeFormatLocale, timeParse } from \"d3-time-format\";\n\nvar locale = timeFormatLocale({\n  dateTime: \"%A, %-d. %Bta %Y klo %X\",\n  date: \"%-d.%-m.%Y\",\n  time: \"%H:%M:%S\",\n  periods: [\"a.m.\", \"p.m.\"],\n  days: [\n    \"sunnuntai\",\n    \"maanantai\",\n    \"tiistai\",\n    \"keskiviikko\",\n    \"torstai\",\n    \"perjantai\",\n    \"lauantai\",\n  ],\n  shortDays: [\"Su\", \"Ma\", \"Ti\", \"Ke\", \"To\", \"Pe\", \"La\"],\n  months: [\n    \"tammikuu\",\n    \"helmikuu\",\n    \"maaliskuu\",\n    \"huhtikuu\",\n    \"toukokuu\",\n    \"kesäkuu\",\n    \"heinäkuu\",\n    \"elokuu\",\n    \"syyskuu\",\n    \"lokakuu\",\n    \"marraskuu\",\n    \"joulukuu\",\n  ],\n  shortMonths: [\n    \"Tammi\",\n    \"Helmi\",\n    \"Maalis\",\n    \"Huhti\",\n    \"Touko\",\n    \"Kesä\",\n    \"Heinä\",\n    \"Elo\",\n    \"Syys\",\n    \"Loka\",\n    \"Marras\",\n    \"Joulu\",\n  ],\n});\n\nexport const parseDate = timeParse(\"%d.%m.%Y\"); // Date stored in data in form 1.5.2020\nexport const formatDate = locale.format(\"%B\");\nexport const formatDateBackToOriginal = locale.format(\"%-d.%-m.%Y\");\nexport const formatDateWeek = timeFormat(\"vko %V\");\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Annotation.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Legend.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Circles.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/Dataviz.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/categories.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/scales.js",["96","97"],"import { max, min } from \"d3-array\";\nimport { scaleLinear } from \"d3-scale\";\nimport { timeMonth } from \"d3-time\";\n\nexport const createYScale = ({allDates, data, width, height, parseDate, formatDate, margin}) => {\n    const minValue = min(allDates)\n    const maxValue  = max(allDates)\n    return scaleLinear().domain([minValue,maxValue]).range([0, height]);\n \n  }\nfunction getNumberOfWeek(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n}\n\n\nexport const createTicks = ({allDates,formatDateWeek, tickDates, parseDate, formatDate, yScale, firstScaledDate, lastScaledDate}) => {\n  let parsed = tickDates.map(e => parseDate(e))\n    parsed.unshift(allDates[0])\n    const bigTicks = parsed.map((value) => {\n      return ({\n      value: formatDate(value),\n      yOffset: yScale(value),\n    })});\n    const smallTicks = allDates.map((value) => {\n      return ({\n      value: formatDateWeek(value),\n      yOffset: yScale(value),\n    })}); \n    return { bigTicks, smallTicks} \n}\n\nexport const createXScale = (width, data) => {\n  const minValue = min(data, d => min(d, d=> d[0]))\n  const maxValue = max(data, d => max(d, d=> d[1]))\n  return scaleLinear().domain([minValue, maxValue]).range([50, width - 50 ])\n}","/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/ScrollyTeller.js",["98"],"import React, {useRef, useEffect} from \"react\";\nimport { Scrollama as ScrollyTell, Step } from \"react-scrollama\";\nimport { formatDateBackToOriginal } from \"../utils/dateMethods\";\nexport const ScrollyTeller = ({ slides, setCurrentStepIndex }) => {\n    const container = useRef(null)\n  const onStepEnter = ({ data, direction }) => {\n    const newIndex = direction === \"up\" && data > 0 ? data - 1 : data;\n    setCurrentStepIndex(newIndex);\n  };\n\n  useEffect(() => {\n      if(container.current) {\n          const {top} = container.current.getBoundingClientRect()\n          const height =container.current.firstChild.getBoundingClientRect().height\n          const currentTop = container.current.style.top || 0 \n          container.current.style.marginTop = currentTop - top - (height/2) - (window.innerHeight / 2) + \"px\";\n        }\n        \n  }, [container])\n\n\n  return (\n      <section ref={container} style={{height: \"100%\"}}>\n    <ScrollyTell  offset={1} onStepEnter={onStepEnter}>\n      {slides.map((_, stepIndex) => (\n        <Step data={stepIndex} key={stepIndex}>\n          <div\n            style={{\n              margin: \"100vh 0\",\n              zIndex: 999,\n              position: \"relative\",\n              transform: \"translate3d(0,0,0)\", // Needed for Safari to respect z index with sticky element\n            }}\n          >\n            {_.text.map((e, i) => (\n              <p\n                className=\"text-paragraph\"\n                key={i}\n                dangerouslySetInnerHTML={{ __html: e }}\n              ></p>\n            ))}\n          </div>\n        </Step>\n      ))}\n    </ScrollyTell>\n    </section>\n  );\n};\n","/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/initialize.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/index.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/components/YAxis.js",[],"/Users/saaantt/Desktop/projektit/plus-ennakko/src/utils/annotations.js",["99","100"],{"ruleId":"101","severity":1,"message":"102","line":44,"column":3,"nodeType":"103","endLine":44,"endColumn":12,"suggestions":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":3,"column":8,"nodeType":"103","messageId":"111","endLine":3,"endColumn":18},{"ruleId":"109","severity":1,"message":"112","line":70,"column":9,"nodeType":"103","messageId":"111","endLine":70,"endColumn":28},{"ruleId":"113","severity":1,"message":"114","line":83,"column":23,"nodeType":"115","messageId":"116","endLine":83,"endColumn":25},{"ruleId":"105","replacedBy":"117"},{"ruleId":"107","replacedBy":"118"},{"ruleId":"109","severity":1,"message":"119","line":52,"column":11,"nodeType":"103","messageId":"111","endLine":52,"endColumn":21},{"ruleId":"113","severity":1,"message":"120","line":52,"column":39,"nodeType":"115","messageId":"121","endLine":52,"endColumn":41},{"ruleId":"109","severity":1,"message":"122","line":93,"column":13,"nodeType":"103","messageId":"111","endLine":93,"endColumn":25},{"ruleId":"109","severity":1,"message":"123","line":132,"column":11,"nodeType":"103","messageId":"111","endLine":132,"endColumn":15},{"ruleId":"109","severity":1,"message":"124","line":1,"column":10,"nodeType":"103","messageId":"111","endLine":1,"endColumn":22},{"ruleId":"109","severity":1,"message":"125","line":3,"column":10,"nodeType":"103","messageId":"111","endLine":3,"endColumn":19},{"ruleId":"109","severity":1,"message":"126","line":11,"column":10,"nodeType":"103","messageId":"111","endLine":11,"endColumn":25},{"ruleId":"109","severity":1,"message":"127","line":3,"column":10,"nodeType":"103","messageId":"111","endLine":3,"endColumn":34},{"ruleId":"109","severity":1,"message":"128","line":1,"column":10,"nodeType":"103","messageId":"111","endLine":1,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":11,"column":40,"nodeType":"115","messageId":"116","endLine":11,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setContainerHeight'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [containerHeight] as a second argument to the useEffect Hook.","Identifier",["129"],"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'censusData' is defined but never used.","unusedVar","'applyRollingAverage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["130"],["131"],"'comparison' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'uniqueGroups' is assigned a value but never used.","'date' is assigned a value but never used.","'formatLocale' is defined but never used.","'timeMonth' is defined but never used.","'getNumberOfWeek' is defined but never used.","'formatDateBackToOriginal' is defined but never used.","'categories' is defined but never used.",{"desc":"132","fix":"133"},"no-global-assign","no-unsafe-negation","Add dependencies array: [containerHeight]",{"range":"134","text":"135"},[1657,1657],", [containerHeight]"]