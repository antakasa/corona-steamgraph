{"version":3,"sources":["utils/categories.js","Dataviz.js","utils/annotations.js","utils/dateMethods.js","utils/scales.js","utils/calculations.js","utils/initialize.js","utils/layout.js","utils/dataMethods.js","Slides.js","utils/colors.js","App.js","reportWebVitals.js","index.js"],"names":["categories","categorizeGroup","group","indexOf","Dataviz","vizProps","slideData","margin","width","height","stackedData","xScale","bigTicks","smallTicks","areas","yScale","greyColors","parseDate","brightColors","annotationProps","id","style","left","right","top","bottom","transform","map","e","i","d","data-index","key","fill","allgrey","highlightedLayers","stroke","index","annotations","date","annotationText","text","orientation","highlight","highlightYAxis","data","colors","Legend","x","y","textAnchor","alignmentBaseline","Annotation","parsedData","console","log","processed","cat","datedCategoryData","find","getDate","getMonth","getYear","x1","x2","length","createAnnotationData","cx","cy","r","strokeWidth","fontSize","YAxis","value","yOffset","strokeDasharray","locale","timeFormatLocale","dateTime","time","periods","days","shortDays","months","shortMonths","timeParse","formatDate","format","formatDateBackToOriginal","formatDateWeek","timeFormat","calculations","baseData","filterDataBasedOnGroups","groups","filter","countSum","arr","reduce","accumulator","obj","parseInt","isNaN","mostInfectionsOnADateByGroups","startDate","endDate","dataGrouped","acc","category","groupByDate","keys","Object","parsed","sum","forEach","push","maxValue","max","calculateByDateAndCategory","dateFiltered","filterDataByDate","categoryAndDateFiltered","under40ShareInPopulation","sample","censusData","under40","onlyGroups","over40","Set","allGroups","total","storeData","getData","initialize","outliers","tickDates","nth","alwaysInclude","window","innerWidth","layout","filteredData","filterByDate","slides","Math","round","annotationDates","element","newDates","stack","offset","stackOffsetSilhouette","stackData","mergedObj","output","prop","rollingAverages","allValuesWithinCategory","avg","rollingAverage","slice","alwaysIncludedValues","everyNth","final","sort","a","b","parseData","allDates","minValue","min","scaleLinear","domain","range","createYScale","firstScaledDate","lastScaledDate","unshift","createTicks","createXScale","area","x0","curve","curveBasis","scaleOrdinal","createGreyColors","settings","avgRange","App","useState","currentStepIndex","setCurrentStepIndex","setVizProps","storeSlides","useEffect","json","className","position","onStepEnter","direction","debug","_","stepIndex","zIndex","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.402ce1ce.chunk.js","sourcesContent":["//export const categories =  [\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\", \"50-59\", \"60-69\", \"70-79\", \"80-\"]\nexport const categories =[\"0-19\", \"20-39\", \"40-59\",\"60-79\", \"80-\"]\nexport const categorizeGroup = (group) => {\n    if ([\"00-10\"].indexOf(group) > -1) return categories[0];\n    if ([\"10-20\"].indexOf(group) > -1) return categories[0];\n    if ([\"20-30\"].indexOf(group) > -1) return categories[1];\n    if ([\"30-40\"].indexOf(group) > -1) return categories[1];\n    if ([\"40-50\"].indexOf(group) > -1) return categories[2];\n    if ([\"50-60\"].indexOf(group) > -1) return categories[2];\n    if ([\"60-70\"].indexOf(group) > -1) return categories[3];\n    if ([\"70-80\"].indexOf(group) > -1) return categories[3];\n    if ([\"80-\"].indexOf(group) > -1) return categories[4];\n    if (group === \"Kaikki ikäryhmät\") return group;\n  }","import \"./Dataviz.css\";\nimport React from \"react\";\nimport { createAnnotationData } from \"./utils/annotations\";\n\nexport const Dataviz = ({ vizProps, slideData }) => {\n  const {\n    margin,\n    width,\n    height,\n    stackedData,\n    xScale,\n    bigTicks,\n    smallTicks,\n    areas,\n    yScale,\n    greyColors,\n    parseDate,\n    brightColors,\n  } = vizProps;\n\n  const annotationProps = { xScale, yScale, stackedData, parseDate };\n  return (\n    <section>\n      <svg\n        id=\"dataviz-container\"\n        style={{\n          width: width + margin.left + margin.right,\n          height: height + margin.top + margin.bottom,\n        }}\n      >\n        <g\n          id=\"container\"\n          style={{\n            transform: \"translate(\" + margin.left + \"px,\" + margin.top + \"px)\",\n          }}\n        >\n          {stackedData.map((e, i) => (\n            <path\n              d={areas(e)}\n              key={e.index}\n              data-index={e.key}\n              style={{\n                fill:\n                  !slideData.allgrey && (!slideData.highlightedLayers || slideData.highlightedLayers.indexOf(e.key) > -1)\n                    ? brightColors(e)\n                    : greyColors(e),\n                stroke: slideData.highlightedLayers && slideData.highlightedLayers.indexOf(e.key) > -1 ? \"white\" : \"none\",\n              }}\n            ></path>\n          ))}\n          {slideData.annotations.map((e, i) => (\n            <Annotation\n              {...annotationProps}\n              date={e.date}\n              key={i}\n              categories={e.categories}\n              annotationText={e.text}\n              orientation={e.orientation}\n            />\n          ))}\n          <YAxis\n          highlight={slideData.highlightYAxis}\n            xScale={xScale}\n            bigTicks={bigTicks}\n            smallTicks={smallTicks}\n            margin={margin}\n            width={width}\n            height={height}\n          />\n          {true && (\n            <Legend data={stackedData} colors={brightColors} height={height} />\n          )}\n        </g>\n      </svg>\n    </section>\n  );\n};\n\nconst Legend = ({ data, colors, height }) => {\n  return (\n    <>\n      {data.map((e, i) => {\n        return (\n          <g key={i}>\n            <rect\n              x=\"0\"\n              y={i * 30}\n              width=\"20\"\n              height=\"20\"\n              style={{ fill: colors(e) }}\n            ></rect>\n            <text\n              x=\"24\"\n              y={i*30 +10}\n              textAnchor=\"left\"\n              style={{ alignmentBaseline: \"middle\", fill: colors(e) }}\n            >\n              {e.key}\n            </text>\n          </g>\n        );\n      })}\n    </>\n  );\n};\n\nconst Annotation = ({\n  stackedData,\n  xScale,\n  yScale,\n  parseDate,\n  date,\n  categories,\n  annotationText,\n  orientation,\n}) => {\n  const { x1, x2 } = createAnnotationData({\n    stackedData,\n    parseDate,\n    date,\n    categories,\n  });\n  date = parseDate(date);\n  return (\n    <g>\n      <circle cx={xScale(x1)} cy={yScale(date)} r=\"2\" fill=\"black\" />\n      <circle cx={xScale(x2)} cy={yScale(date)} r=\"2\" fill=\"black \" />\n      <path\n        style={{ stroke: \"black\", strokeWidth: 2, fill: \"none\" }}\n        d={`\n          M${xScale(x1)} ${orientation === \"down\"? yScale(date) + 5 : yScale(date) - 5} \n          L${xScale(x1)} ${\n          orientation === \"down\" ? yScale(date) + 20 : yScale(date) - 20\n        } \n          L${xScale(x2)} ${\n          orientation === \"down\" ? yScale(date) + 20 : yScale(date) - 20\n        }\n          L${xScale(x2)} ${orientation === \"down\" ? yScale(date) + 5 : yScale(date) - 5}\n          `}\n      />\n      <text\n        x={xScale(x1)}\n        y={\n          orientation === \"down\"\n            ? yScale(date) + 20 + 13\n            : yScale(date) - 20 - 10\n        }\n        style={{\n          fontSize: \"13px\",\n          fill: \"black\",\n          transform: \"translateX(0px)\",\n        }}\n      >\n        {annotationText}\n      </text>\n    </g>\n  );\n};\n\nconst YAxis = ({highlight, xScale, bigTicks, smallTicks, margin, width, height }) => {\n  return (\n    <>\n      <g>\n        {false && <path d={`M 9.5 0.5 V 620`} stroke=\"currentColor\" />}\n        {false &&\n          smallTicks.map(({ value, yOffset }, i) => (\n            <g key={value} transform={`translate(9.5, ${yOffset})`}>\n              {false && (\n                <line\n                  x1=\"0\"\n                  stroke-dasharray=\"1\"\n                  x2={30}\n                  stroke=\"currentColor\"\n                />\n              )}\n              <text\n                x=\"50\"\n                key={value}\n                style={{\n                  fontSize: \"10px\",\n                  textAnchor: \"middle\",\n                  fontWeight: \"bold\",\n                  fill: highlight ? \"red\" : \"white\",\n                  transform: \"translate(-32px, -2px)\",\n                }}\n              >\n                {i % 3 === 3 - 1 ? value : \"\"}\n              </text>\n            </g>\n          ))}\n        {bigTicks.map(({ value, yOffset }) => (\n          <g key={value} transform={`translate(9.5, ${yOffset})`}>\n            <line\n              x1={width}\n              strokeWidth=\"0.3\"\n              strokeDasharray=\"2 2\"\n              x2={0}\n              stroke={highlight ? \"goldenrod\" : \"white\"}\n            />\n            <text\n              x=\"40\"\n              key={value}\n              style={{\n                fontSize: \"13px\",\n                fill: highlight ? \"goldenrod\" : \"white\",\n                transform: `translate(${width - 100}px, -6px)`,\n              }}\n            >\n              {value}\n            </text>\n          </g>\n        ))}\n      </g>\n    </>\n  );\n};\n","import { categories } from \"./categories\";\n\nexport const createAnnotationData = ({\n  stackedData,\n  parsedData,\n  parseDate,\n  date,\n  categories,\n}) => {\n  console.log(stackedData)\n  let processed = categories.map((cat) => {\n    const categoryData = stackedData.find((e) => e.key === cat);\n    const datedCategoryData = categoryData.find((e) => {\n      return (\n        e.data.date.getDate() === parseDate(date).getDate() &&\n        e.data.date.getMonth() === parseDate(date).getMonth() &&\n        e.data.date.getYear() === parseDate(date).getYear()\n      );\n    });\n    try {\n      const x1 = datedCategoryData[0];\n      const x2 = datedCategoryData[1];\n\n      return { x1, x2 };\n    } catch {\n      console.log(`cannot find date ${date}`);\n    }\n  });\n  return { x1: processed[0].x1, x2: processed[processed.length - 1].x2 };\n};\n","import { formatLocale } from \"d3-format\";\nimport { timeFormat, timeFormatLocale, timeParse } from \"d3-time-format\";\n\nvar locale = timeFormatLocale({\n  dateTime: \"%A, %-d. %Bta %Y klo %X\",\n  date: \"%-d.%-m.%Y\",\n  time: \"%H:%M:%S\",\n  periods: [\"a.m.\", \"p.m.\"],\n  days: [\n    \"sunnuntai\",\n    \"maanantai\",\n    \"tiistai\",\n    \"keskiviikko\",\n    \"torstai\",\n    \"perjantai\",\n    \"lauantai\",\n  ],\n  shortDays: [\"Su\", \"Ma\", \"Ti\", \"Ke\", \"To\", \"Pe\", \"La\"],\n  months: [\n    \"tammikuu\",\n    \"helmikuu\",\n    \"maaliskuu\",\n    \"huhtikuu\",\n    \"toukokuu\",\n    \"kesäkuu\",\n    \"heinäkuu\",\n    \"elokuu\",\n    \"syyskuu\",\n    \"lokakuu\",\n    \"marraskuu\",\n    \"joulukuu\",\n  ],\n  shortMonths: [\n    \"Tammi\",\n    \"Helmi\",\n    \"Maalis\",\n    \"Huhti\",\n    \"Touko\",\n    \"Kesä\",\n    \"Heinä\",\n    \"Elo\",\n    \"Syys\",\n    \"Loka\",\n    \"Marras\",\n    \"Joulu\",\n  ],\n});\n\nexport const parseDate = timeParse(\"%d.%m.%Y\"); // Date stored in data in form 1.5.2020\nexport const formatDate = locale.format(\"%B\");\nexport const formatDateBackToOriginal = locale.format(\"%-d.%-m.%Y\");\nexport const formatDateWeek = timeFormat(\"vko %V\");\n","import { max, min } from \"d3-array\";\nimport { scaleLinear } from \"d3-scale\";\nimport { timeMonth } from \"d3-time\";\n\nexport const createYScale = ({allDates, data, width, height, parseDate, formatDate, margin}) => {\n    const minValue = min(allDates)\n    const maxValue  = max(allDates)\n    return scaleLinear().domain([minValue,maxValue]).range([0, height]);\n \n  }\nfunction getNumberOfWeek(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n}\n\n\nexport const createTicks = ({allDates,formatDateWeek, tickDates, parseDate, formatDate, yScale, firstScaledDate, lastScaledDate}) => {\n  let parsed = tickDates.map(e => parseDate(e))\n    parsed.unshift(allDates[0])\n    const bigTicks = parsed.map((value) => {\n      return ({\n      value: formatDate(value),\n      yOffset: yScale(value),\n    })});\n    const smallTicks = allDates.map((value) => {\n      return ({\n      value: formatDateWeek(value),\n      yOffset: yScale(value),\n    })}); \n    return { bigTicks, smallTicks} \n}\n\nexport const createXScale = (width, data) => {\n  const minValue = min(data, d => min(d, d=> d[0]))\n  const maxValue = max(data, d => max(d, d=> d[1]))\n  return scaleLinear().domain([minValue, maxValue]).range([50, width - 50 ])\n}","import { max } from \"d3-array\";\nimport censusData from \"../censusData.json\";\nimport { parseDate } from \"./dateMethods\";\nexport const calculations = (() => {\n  let baseData = {};\n\n  const filterDataByDate = (data, date) => data.filter((e) => e.date === date);\n\n  const filterDataBasedOnGroups = (data, groups) =>\n    data.filter((e) => groups.indexOf(e.group) > -1);\n\n  const groupByDate = (data, startDate, endDate) => {\n    return data.reduce((acc, obj) => {\n      const category = obj.group;\n      if (acc[obj.date]) {\n        acc[obj.date] = {\n          ...acc[obj.date],\n          [category]:\n            (parseInt(acc[obj.date][category], 10) || 0) +\n            (parseInt(obj.value, 10) || 0),\n        };\n      } else {\n        if (\n          !startDate ||\n          !endDate ||\n          (parseDate(obj.date) > parseDate(startDate) &&\n            parseDate(obj.date) < parseDate(endDate))\n        ) {\n          acc[obj.date] = { [category]: obj.value || 0 };\n        }\n      }\n\n      return acc;\n    }, {});\n  };\n\n  const countSum = (arr) => {\n    if (arr.length === 0) return 0;\n    return arr.reduce(function (accumulator, obj) {\n      let value = parseInt(obj.value, 10);\n      if (isNaN(value)) value = 0; //TODO What are the empty values\n      return accumulator + value;\n    }, 0);\n  };\n\n  return {\n    mostInfectionsOnADateByGroups: (categories, startDate, endDate) => {\n      const dataGrouped = groupByDate(baseData, startDate, endDate);\n      const keys = Object.keys(dataGrouped);\n\n      let parsed = [];\n      let comparison = keys.map((key) => {\n        let obj = {};\n        let sum = 0;\n\n        categories.forEach((category) => {\n          obj[category] = isNaN(parseInt(dataGrouped[key][category], 10))\n            ? 0\n            : parseInt(dataGrouped[key][category], 10);\n          sum =\n            sum +\n            (isNaN(parseInt(dataGrouped[key][category], 10))\n              ? 0\n              : parseInt(dataGrouped[key][category], 10));\n        });\n        obj.sum = sum;\n        obj.date = key;\n        parsed.push(obj);\n      });\n      console.log(parsed)\n      const maxValue = max(parsed, (d) => d.sum);\n      const date = parsed.find((e) => e.sum === maxValue);\n      return { maxValue, date };\n    },\n    calculateByDateAndCategory: (date, categories) => {\n      const dateFiltered = filterDataByDate(baseData, date);\n      const categoryAndDateFiltered = filterDataBasedOnGroups(\n        dateFiltered,\n        categories\n      );\n      return countSum(categoryAndDateFiltered);\n    },\n    under40ShareInPopulation: () => {\n      const sample =\n        parseInt(censusData[0][\"0-19\"], 10) +\n        parseInt(censusData[0][\"20-39\"], 10);\n      console.log(sample);\n      const total = parseInt(censusData[0][\"total\"], 10);\n      return (sample / total) * 100;\n    },\n    under40: () => {\n      const onlyGroups = baseData.map((e) => e.group);\n      const uniqueGroups = [...new Set(onlyGroups)];\n\n      // Which % of infections are from people under 40 yrs\n      const over40Groups = [\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"];\n      const under40Groups = [\"00-10\", \"10-20\", \"20-30\", \"30-40\"];\n      const all = [\"Kaikki ikäryhmät\"];\n      const over40 = filterDataBasedOnGroups(baseData, over40Groups);\n      const under40 = filterDataBasedOnGroups(baseData, under40Groups);\n      const allGroups = filterDataBasedOnGroups(baseData, all);\n      const sanityCheck =\n        [...over40, ...under40, ...allGroups].length === baseData.length;\n\n      if (sanityCheck) {\n        const total = countSum([...over40, ...under40]);\n        const under40Average = (countSum(under40) / total) * 100;\n        return under40Average;\n      }\n    },\n    storeData: (data) => {\n      baseData = data;\n    },\n    getData: () => baseData,\n  };\n})();\n","import { categories, categorizeGroup } from \"./categories.js\";\nimport { createBrightColors, createGreyColors } from \"./colors.js\";\nimport {\n  createAreas,\n  filterByDate,\n  parseData,\n  stackData,\n} from \"./dataMethods.js\";\nimport {\n  formatDate,\n  formatDateBackToOriginal,\n  formatDateWeek,\n  parseDate,\n} from \"./dateMethods.js\";\nimport { layout } from \"./layout.js\";\nimport { createXScale, createYScale, createTicks } from \"./scales.js\";\nimport { calculations } from \"./calculations\";\nimport { generateSlides } from \"../Slides.js\";\n\nexport const initialize = ({\n  data,\n  startDate,\n  endDate,\n  outliers,\n  tickDates,\n  nth,\n  alwaysInclude,\n}) => {\n  const { margin, width, height } = layout();\n  // filterByDate()\n  // Filter data by date:\n  // 1. create a sample of dataset including only the information between start point & end point\n  // 2. exclude outliers – dates that contain strange values\n\n  const filteredData = filterByDate({\n    parseDate,\n    data,\n    startDate,\n    endDate,\n    outliers,\n  });\n\n  // store this data to be used with calculations\n  calculations.storeData(filteredData);\n\n  const slides = generateSlides();\n  let annotationDates = [];\n  slides.forEach(element => {\n    let newDates = element[\"annotations\"].map(e => e.date)\n    annotationDates = [...annotationDates, ...newDates]\n  });\n\n  alwaysInclude = [...alwaysInclude, ...annotationDates]\n\n  // pa3rseData()\n  // Process data into an array of objects where each object holds values of a one particular date.\n  // 1: {date: , catgory2, category3, category4...}\n  // 2. Counts rolling averages\n  // 3. Picks every nth from the data to reduce sample size\n  // 4. Removes outliers and makes sure the 'always included' dates (e.g. those with annotations)\n  // are included in the sample\n  const parsedData = parseData({\n    data: filteredData,\n    parseDate,\n    categories,\n    categorizeGroup,\n    nth,\n    alwaysInclude,\n    formatDateBackToOriginal,\n  });\n\n  const stackedData = stackData(parsedData, categories);\n  const allDates = stackedData[0].map((e) => e.data.date);\n  const yScale = createYScale({\n    data: stackedData,\n    width,\n    height,\n    margin,\n    allDates,\n    parseDate,\n    formatDate,\n  });\n  const { bigTicks, smallTicks } = createTicks({\n    tickDates,\n    formatDate,\n    yScale,\n    parseDate,\n    allDates,\n    formatDateWeek,\n  });\n  const xScale = createXScale(width, stackedData);\n  const areas = createAreas(xScale, yScale);\n  const brightColors = createBrightColors(categories);\n  const greyColors = createGreyColors(categories);\n  return {\n    vizProps: {\n      margin,\n      width,\n      height,\n      stackedData,\n      xScale,\n      bigTicks,\n      smallTicks,\n      areas,\n      yScale,\n      parseDate,\n      brightColors,\n      greyColors,\n    },\n    slides,\n  };\n};\n","export const layout = () => {\n    const margin = { top: 20, right: 10, bottom: 0, left: 10 };\n    const width = (window.innerWidth > 500 ? 500 : window.innerWidth)- margin.left - margin.right;\n    const height = (window.innerWidth > 500 ? 500 : window.innerWidth) - margin.top - margin.bottom;\n    return { margin, width, height };\n}\n","import rollingAverage from \"sma\";\nimport { area, curveBasis, stack, stackOffsetSilhouette } from \"d3-shape\";\nimport censusData from \"../censusData.json\";\n\nconst everyNth = (arr, nth) => arr.filter((e, i) => i % nth === nth - 1);\n\nexport const stackData = (data, keys) => {\n  return stack().offset(stackOffsetSilhouette).keys(keys)(data);\n};\nexport const createAreas = (y, x) =>\n  area()\n    .y(function (d) {\n      return x(d.data.date);\n    })\n    .x0(function (d) {\n      return y(d[0]);\n    })\n    .x1(function (d) {\n      return y(d[1]);\n    })\n    .curve(curveBasis);\n\nexport const filterByDate = ({\n  data,\n  startDate,\n  endDate,\n  parseDate,\n  outliers,\n}) =>\n  data.filter(\n    (e) =>\n      outliers.indexOf(e.date) === -1 &&\n      parseDate(e.date) > parseDate(startDate) &&\n      parseDate(e.date) < parseDate(endDate)\n  );\n\nexport const parseData = ({\n  data,\n  parseDate,\n  categories,\n  categorizeGroup,\n  nth,\n  alwaysInclude,\n  formatDateBackToOriginal,\n}) => {\n  //console.log(data.filter((e) => e.date === \"5.7.2020\"));\n  var mergedObj = data.reduce((acc, obj) => {\n    const category = categorizeGroup(obj.group);\n    //const category = obj.group\n    if (acc[obj.date]) {\n      acc[obj.date] = {\n        ...acc[obj.date],\n        [category]:\n          (parseInt(acc[obj.date][category], 10) || 0) +\n          (parseInt(obj.value, 10) || 0),\n      };\n    } else {\n      acc[obj.date] = { [category]: obj.value || 0 };\n    }\n\n    return acc;\n  }, {});\n\n  // TODO: SANITY CHECK THAT \"KAIKKI IKÄRYHMÄT\" VALUE MATCHES THE SUM OF GROUP VALUES\n\n  let output = [];\n  for (let prop in mergedObj) {\n    output.push({ ...mergedObj[prop], date: parseDate(prop) });\n  }\n  const applyRollingAverage = (() => {\n    //  modify data so that daily values are actually moving average of last 7 days\n    let rollingAverages = {};\n    let range = 7;\n    for (let index = 0; index < categories.length; index++) {\n      let category = categories[index];\n\n      const allValuesWithinCategory = output.map((e) => e[category]);\n\n      const avg = rollingAverage(allValuesWithinCategory, range);\n      rollingAverages[category] = avg;\n    }\n\n    output.map((e, i) => {\n      if (i < 6) {\n        return null;\n      }\n\n      for (let index = 0; index < categories.length; index++) {\n        let category = categories[index];\n        let value = rollingAverages[category][i - 6];\n        value = value === \"NaN\" ? 0 : value;\n        //value = parseInt(value) / censusData[0][category];\n         value = parseInt(value)\n        e[category] = value;\n      }\n    });\n    output = output.slice(6);\n  })();\n\n  const alwaysIncludedValues = output.filter((e) => {\n  return  alwaysInclude.indexOf(formatDateBackToOriginal(e.date)) > -1\n  }\n    );\n  console.log(alwaysInclude)\n  console.log(alwaysIncludedValues)\n  output = everyNth(output, nth);\n  function sortByDateAscending(a, b) {\n    // Dates will be cast to numbers automagically:\n    return a.date - b.date;\n}\n  const final = [...output, ...alwaysIncludedValues]\n  final.sort(sortByDateAscending)\n  return final;\n};\n","import { calculations } from \"./utils/calculations\";\nexport const generateSlides = () => [\n  {\n    annotations: [],\n    text: [\n      \"Kuviossa näkyy tartunnat ikäryhmittäin. Tartunnoilla tarkoitetaan rekisteröityjä positiivisia testituloksia.\",\n    ],\n  },\n  {\n    highlightedLayers: [\"20-39\"],\n    annotations: [],\n    text: [\n      \"Yksi alue edustaa yhtä ikäryhmää. Korostettuna näkyy tartuntamäärässä mitattuna suurin ryhmä eli 20–39-vuotiaat.\",\n    ],\n  },\n  {\n    annotations: [\n      {\n        date: \"10.11.2020\",\n        categories: [\"0-19\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"00-10\",\n          \"10-20\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"20-39\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"20-30\",\n          \"30-40\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"40-59\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"40-50\",\n          \"50-60\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"60-79\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"60-70\",\n          \"70-80\",\n        ])} kpl`,\n        orientation: \"down\",\n      },\n      {\n        date: \"10.11.2020\",\n        categories: [\"80-\"],\n        text: `${calculations.calculateByDateAndCategory(\"10.11.2020\", [\n          \"80-\",\n        ])} kpl`,\n        orientation: \"up\",\n      },\n    ],\n   \n    text: [\n      'Päivittäisen heilunnan tasaamiseksi tartuntoja kuvaavat datapisteet on laskettu kuviossa <a href=\"https://fi.wikipedia.org/wiki/Liukuva_keskiarvo\" target=\"_blank\">liukuviksi keskiarvoiksi</a> 7 päivän ajalta. ',\n      \"Teksteissä tartuntojen kappalemäärillä viitataan kuitenkin absoluuttisiin lukuihin.\",\n    ],\n  },\n  {\n    annotations: [],\n    text: [\"Kunkin alueen leveys suhteessa muihin kuvaa tartuntojen lukumäärää.\",\n    \"Mitä leveämpi alue on, sitä enemmän tartuntoja rekisteröitiin.\"],\n  },\n  {\n    highlightedLayers: [\"0-19\", \"20-39\"],\n    annotations: [],\n    text: [\n      `Alle 40-vuotiaiden osuus kaikista varmistetuista tartunnoista on noin ${Math.round(\n        calculations.under40()\n      )} %.`,\n      `Ryhmän noin 2,5 miljoonaa jäsentä kattaa ${Math.round(\n        calculations.under40ShareInPopulation()\n      )} % Suomen väestöstä.`,\n    ],\n  },\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"])\n    const date = data.date.date \n    const text = [`Suurimmillaan tartuntojen rekisteröinnit olivat ${data.date.date}`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"])\n    const date = data.date.date \n    const text = [`Yli 40-vuotiailla nähtiin tosin myös samoihin aikoihin huomattava piikki.`]\n    console.log(date)\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"down\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"40-59\", \"60-79\", \"80-\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Keskimäärin eri ikäryhmien muutokset mukailevat melko hyvin toisiaan.`,\n      `Syksyllä alle 40-vuotiaiden ryhmässä nähtiin kuitenkin hieman muita korkeampia lukuja.`]\n    const annotations = [\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"00-10\", \"10-20\", \"20-30\", \"30-40\"], \"1.8.2020\", \"28.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Esimerkiksi ${date}, rekisteröitiin ${data.maxValue} tartunaa alle 40-vuotialla.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"0-19\", \"20-39\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  (()=> {\n    const data = calculations.mostInfectionsOnADateByGroups([\"40-50\", \"50-60\", \"60-70\", \"70-80\", \"80-\"], \"10.10.2020\", \"20.10.2020\")\n    const date = data.date.date \n    const text = [\n      `Yli 40-vuotialla rekisteröitiin samoihin aikoihin enimmillään ${data.maxValue} tartuntaa.`]\n    const annotations = [\n      {\n        date,\n        categories: [\"40-59\", \"60-79\", \"80-\"],\n        text: `${data.maxValue} kpl`,\n        orientation: \"up\"\n      }\n    ];\n    return ({\n      highlightedLayers: [\"0-19\", \"20-39\"],\n      text,\n      annotations\n    })\n  })(),\n  {\n    highlightedLayers: [\"0-19\"],\n    annotations: [\n    ],\n    text: [\"Alle 20-vuotiaiden tartuntamäärissäkin näkyi selkeää kasvua syksyn aikana.\",\"Tätä taustaa vasten myös lasten ja nuorten harrastustoimintaan kohdistuneet rajoitustoimet näyttävät perustellummilta.\"],\n  }\n];\n","import { scaleOrdinal } from \"d3-scale\";\n\nexport const createBrightColors = (keys) => {\n    return scaleOrdinal().domain(keys).range([\"#e76f51\", \"#f4a261\", \"#e9c46a\",\"#2a9d8f\", \"#264653\",])\n}\n\nexport const createGreyColors = (keys) => {\n    return scaleOrdinal().domain(keys).range([\"#dcd4d1\",\"#ede2de\",\"#e0cfc5\",\"#cfc0b7\",\"#d1c2c2\"])\n}\n\n\n\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { json } from \"d3-fetch\";\nimport { Dataviz } from \"./Dataviz\";\nimport { Scrollama as ScrollyTeller, Step } from \"react-scrollama\";\nimport { initialize } from \"./utils/initialize\";\n\nconst settings = {\n  startDate: \"15.4.2020\",\n  endDate: \"20.1.2021\",\n  avgRange: 7, // how many days are taken into account when counting rolling average\n  nth: 7, // pick every nth value from averaged and date filtered data. This smoothens the curves.\n  outliers: [\"26.11.2020\", \"27.11.2020\"], // dropped from data\n  alwaysInclude: [\"10.12.2020\", \"10.11.2020\", \"15.9.2020\", \"2.8.2020\"],\n  tickDates: [\n    // note that first is added automatically\n    \"1.6.2020\",\n    \"1.7.2020\",\n    \"1.8.2020\",\n    \"1.9.2020\",\n    \"1.10.2020\",\n    \"1.11.2020\",\n    \"1.12.2020\",\n    \"1.1.2021\",\n  ],\n};\n\nconst App = () => {\n  const [data, storeData] = useState(null);\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [vizProps, setVizProps] = useState(null);\n  const [slides, storeSlides] = useState(null);\n\n  useEffect(() => {\n    if(!data) return\n    const { vizProps, slides } = initialize({ ...settings, data });\n    setVizProps(vizProps);\n    storeSlides(slides);\n  }, [data]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await json(\n        \"https://plus.yle.fi/lambda_sheets/korona/2021-01-korona_ikaryhma/data.json\"\n      );\n      storeData(data.data);\n    })();\n  }, []);\n\n  const onStepEnter = ({ data, direction }) => {\n    const newIndex = direction === \"up\" && data > 0 ? data - 1 : data;\n    setCurrentStepIndex(newIndex);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Koronaviruksen sanottiin syksyllä leviävän etenkin nuorten aikuisten\n          parissa.\n        </p>\n        <p>\n          Miltä todellisuus näyttää? Kuinka esimerkiksi korkeakoulujen\n          fuksiaiset tai kesäriennot vaikuttavat ikäryhmien osuuksiin\n          tartunnoissa?\n        </p>\n      </header>\n      {!vizProps || !slides ? (\n        <section>Ladataan...</section>\n      ) : (\n        <>\n          <section\n            id=\"dataviz\"\n            style={{ position: \"sticky\", top: 10, left: 0 }}\n          >\n            <Dataviz\n              vizProps={vizProps}\n              slideData={slides ? slides[currentStepIndex] : null}\n            />\n            <div id=\"circle-container\">\n              {slides.map((e, i) => (\n                <div\n                  id=\"circle\"\n                  key={i}\n                  className={currentStepIndex >= i ? \"seen\" : \"not-seen\"}\n                ></div>\n              ))}\n            </div>\n          </section>\n            <ScrollyTeller offset={1} onStepEnter={onStepEnter} debug>\n              {slides.map((_, stepIndex) => (\n                <Step data={stepIndex} key={stepIndex}>\n                  <div\n                    style={{\n                      margin: \"50vh 0\",\n                      zIndex: 999,\n                      position: \"relative\",\n                      transform: \"translate3d(0,0,0)\", // Needed for Safari to respect z index with sticky element\n                    }}\n                  >\n                    {_.text.map((e, i) => (\n                      <p\n                        className=\"text-paragraph\"\n                        key={i}\n                        dangerouslySetInnerHTML={{ __html: e }}\n                      ></p>\n                    ))}\n                  </div>\n                </Step>\n              ))}\n            </ScrollyTeller>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}